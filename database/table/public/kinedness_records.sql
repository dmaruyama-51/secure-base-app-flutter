CREATE TABLE public.kinedness_records (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  giver_id bigint NOT NULL,
  content text NOT NULL,
  created_at timestamp with time zone default timezone('utc' :: text, now()) not null,
  updated_at timestamp with time zone default timezone('utc' :: text, now()) not null,

  CONSTRAINT kinedness_records_pkey PRIMARY KEY (id),
  CONSTRAINT kinedness_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT kinedness_records_giver_id_fkey FOREIGN KEY (giver_id) REFERENCES kindness_givers(id) ON UPDATE CASCADE ON DELETE SET NULL,
);

comment on table public.kinedness_records is 'ユーザーが他人から受け取った優しさを記録する';

comment on column kinedness_records.user_id is '記録作成ユーザーID（users.idと連携）';
comment on column kinedness_records.giver_id is '優しさ記録対象者ID（kindness_givers.idと連携）';
comment on column kinedness_records.content is '記録内容（テキスト）';


-- RLSを有効化
alter table kinedness_records enable row level security;

-- ポリシーを作成
CREATE POLICY "Users can create a kinedness_records."
ON kinedness_records FOR INSERT
TO authenticated
WITH CHECK ( (SELECT auth.uid()) = user_id );

CREATE POLICY "Users can update their own kinedness_records."
ON kinedness_records FOR UPDATE
TO authenticated
USING ( (SELECT auth.uid()) = user_id )
WITH CHECK ( (SELECT auth.uid()) = user_id );

CREATE POLICY "Users can delete a kinedness_records."
ON kinedness_records FOR DELETE
TO authenticated
USING ( (SELECT auth.uid()) = user_id );

CREATE POLICY "Users can view their own kinedness_records."
ON kinedness_records
FOR SELECT USING ( (SELECT auth.uid()) = user_id );
